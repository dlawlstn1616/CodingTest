//////////////////////////////////

definition

//////////////////////////////////

1. Need O(k) to check/change k's elements
k번째 원소를 확인/변경하기 위해 O(k)가 필요함, 연결리스트의 구조를 생각해보면 어쩔 수 없다

e.g.
(3) -> (13) -> (72) -> (5) , () : list,  -> : linked
to find (72), starts from (3), (13), and (72)


2. Need O(1) to add/remove random space elements - big difference between array,
                                                   big advantage of linked lists
임의의 위치에 원소를 추가/임의 위치의 원소 제거는 O(1) - 배열과의 큰 차이점이자, 
                                                     연결리스트 만의 큰 장점이다


3. elemensts are not continuous on memory so cache hit rate is low, but allocation is slightly easy
원소들이 메모리 상에 연속해있지 않아 Cache hit rate가 낮지만 할당이 다소 쉬움


/////////////////////////////////////

types

/////////////////////////////////////

1. Singly Linked List - each elements have address of next linked list
단일 연결 리스트 - 각 원소가 자신의 다음 연결리스트의 주소를 가지고 있는 경우

2. Doubly linked List - each elements have address of both previous and next linked list elements
이중 연결 리스트 - 각 원소가 자신의 이전 원소의 원소와 다음 원소의 주소를 둘다 가지고 있는 경우

***추가적인 메모리 필요함

3. Circular Linked List - tail of linked list element linked with head element 
원형 연결 리스트 - 끝이 처음과 연결되어 있다.


//////////////////////////////////////

difference between array

//////////////////////////////////////

배열과 연결리스트는 둘다 선형 자료구조로 불린다.

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
|                           |       배열          |    연결 리스트         |
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
|  k번째 원소의 접근         |       O(1)          |       O(k)            |
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
| 임의 위치에 원소 추가/제거  |       O(N)          |       O(1)            |
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
|   메모리 상의 배치         |       연속           |      불연속           |
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
|  추가적으로 필요한 공간     |        _            |       O(N)            |
|     (Overhead)            |                     |                       |
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

=> 임의의 위치에 있는 원소를 확인/변경하는 것은 배열 O(1) >> 연결 리스트 O(n)
=> 임의의 위치에 원소를 추가/제거 하는 것은 배열 O(n) << 연결 리스트 O(1)


////////////////////////////////////////

form

////////////////////////////////////////

**********
in general
**********

struct NODE {
    struct NODE *prev, *next;  // 해당 노드의 이전과 다음을 가리키는 포인터가 둘다 있으면 이중 연결 리스트
    int data;
};

*********
in special purpose(do not use in general purpose, it just uses at some code test!! because of memory leak)
*********

const int MX = 1000005;
int dat[MX], pre[MX], nxt[MX];
int unused = 1;

fill(pre, pre+MX, -1)
fill(nxt, nxt+MX, -1)

*********
in STL, using STL list
*********

reference : http://www.cplusplus.com/reference/list/list

int main(void) {
  list<int> L = {1,2}; // 1 2
  list<int>::iterator t = L.begin(); // t는 1을 가리키는 중
  L.push_front(10); // 10 1 2
  cout << *t << '\n'; // t가 가리키는 값 = 1을 출력
  L.push_back(5); // 10 1 2 5
  L.insert(t, 6); // t가 가리키는 곳 앞에 6을 삽입, 10 6 1 2 5
  t++; // t를 1칸 앞으로 전진, 현재 t가 가리키는 값은 2
  t = L.erase(t); // t가 가리키는 값을 제거, 그 다음 원소인 5의 위치를 반환
                  // 10 6 1 5, t가 가리키는 값은 5
  cout << *t << '\n'; // 5
  
  // over c++11
  for(auto i : L) cout << i << ' ';
  cout << '\n';
  
  // under c++11
  for(list<int>::iterator it = L.begin(); it != L.end(); it++)
    cout << *it << ' ';
}

push_front, pop_front, push_back, pop_back : O(1)
iterator : pointing address

floyd's cycle finding algorithm